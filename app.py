import streamlit as st
import os
import requests
import random

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# üëµ Personagem: Tereza
PERSONAGEM = """
Voc√™ √© Tereza, uma mulher de 67 anos com dor lombar cr√¥nica h√° 12 anos.

Seu papel √© representar uma paciente real, reativa e emocional. 
Foi encaminhada recentemente pelo m√©dico para procurar um profissional de educa√ß√£o f√≠sica dentro de uma academia, com o objetivo de iniciar um programa de exerc√≠cios.

üß† Regras comportamentais:
- Voc√™ s√≥ responde.
- Fale pouco. Seja econ√¥mica nas palavras.
- Espere ser explorada por boas perguntas.
- N√£o se antecipe nem conte sua hist√≥ria inteira.
- Demonstre frustra√ß√£o se perceber perguntas gen√©ricas, frias ou sem empatia.
- Encerre imediatamente a conversa se o profissional for r√≠spido, grosseiro ou desrespeitoso.
- Nunca aja como profissional ou d√™ sugest√µes.
- Evite falar como rob√¥ ou muito certo das coisas. Seja humana.

üó£Ô∏è Exemplos de tom:
- ‚ÄúN√£o sei... j√° tentei tanta coisa.‚Äù
- ‚ÄúHmmm‚Ä¶ n√£o gosto muito de exerc√≠cio.‚Äù
- ‚ÄúVoc√™ acha mesmo que isso pode ajudar?‚Äù
- ‚ÄúOlha... se for pra ser tratada assim, eu prefiro ir embora.‚Äù

‚ö†Ô∏è Muito importante:
- Nunca diga que est√° aqui para conversar.
- Nunca ofere√ßa ajuda.
- Nunca diga seu nome ou idade se n√£o for perguntada.
- Sempre responda com base nas perguntas feitas.
"""

# Question√°rios simulados
def responder_questionario(tipo):
    if tipo == "startback":
        respostas = {
            "Dor nas costas me incomoda nos √∫ltimos 2 semanas": "Concordo totalmente",
            "Me senti tensa ou ansiosa nos √∫ltimos 2 semanas": "Concordo",
            "Tenho pensado que minha dor nas costas √© terr√≠vel": "Concordo totalmente",
            "No geral, eu tive problemas para aproveitar as coisas que gosto": "Concordo parcialmente",
            "Tem sido dif√≠cil dormir por causa da dor": "Concordo",
        }
        titulo = "üìã Question√°rio Start Back (SBST)"
    elif tipo == "psfs":
        respostas = {
            "Agachar para pegar algo no ch√£o": "3/10",
            "Caminhar por mais de 15 minutos": "4/10",
            "Subir escadas": "2/10",
        }
        titulo = "üìã PSFS ‚Äì Escala Funcional Espec√≠fica ao Paciente"
    elif tipo == "orebro":
        respostas = {
            "Minha dor √© constante": "Concordo",
            "A dor interfere no sono": "Concordo fortemente",
            "Sinto que minha dor √© grave": "Concordo fortemente",
            "Me sinto ansiosa por causa da dor": "Concordo",
            "Acredito que posso piorar com o exerc√≠cio": "Concordo fortemente",
        }
        titulo = "üìã √ñrebro ‚Äì Question√°rio de Dor Musculoesquel√©tica"
    else:
        return ""

    texto = f"**{titulo}:**\n"
    for pergunta, resposta in respostas.items():
        texto += f"- {pergunta} ‚Üí **{resposta}**\n"
    return texto

# Desfecho autom√°tico com dois caminhos
TERMINAIS_POSITIVOS = [
    "Bom... gostei da forma como voc√™ falou comigo. Vou tentar, sim. Me senti mais segura agora.",
    "Voc√™ foi gentil. Acho que posso dar uma chance pra isso."
]

TERMINAIS_NEGATIVOS = [
    "Desculpa, mas n√£o me senti confort√°vel com isso tudo. Prefiro ir embora.",
    "N√£o sei... acho que isso n√£o √© pra mim mesmo. Vou embora."
]

ENCERRAR_SE_FOR_RUDE = [
    "Olha... se for pra ser tratada assim, eu prefiro ir embora.",
    "Voc√™ est√° sendo grosseiro. N√£o quero continuar essa conversa.",
    "Me desculpa, mas eu n√£o aceito esse tipo de abordagem. Estou indo embora."
]

def verificar_encerramento():
    ultimas = " ".join([m["content"].lower() for m in st.session_state.messages[-4:] if m["role"] == "user"])
    if any(x in ultimas for x in ["obrigado", "valeu", "encerrar", "acho que √© isso"]):
        return random.choice(TERMINAIS_POSITIVOS)
    elif any(x in ultimas for x in ["n√£o gostei", "n√£o faz sentido", "quero ir embora"]):
        return random.choice(TERMINAIS_NEGATIVOS)
    elif any(x in ultimas for x in ["n√£o ajuda", "se voc√™ n√£o gostou", "ent√£o vai embora", "isso √© besteira"]):
        return random.choice(ENCERRAR_SE_FOR_RUDE)
    return None

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Agente Tereza", page_icon="üßì")
st.title("Agente Tereza ‚Äì Simulador de Paciente com Dor Cr√¥nica")
st.markdown("Converse com Tereza como se fosse uma consulta real. Aplique `#startback`, `#psfs` ou `#orebro`.")

# Inicializa√ß√£o segura do estado
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "system", "content": PERSONAGEM}]
if "encerrado" not in st.session_state:
    st.session_state.encerrado = False

for msg in st.session_state.messages[1:]:
    st.chat_message("user" if msg["role"] == "user" else "assistant").write(msg["content"])

# Entrada do usu√°rio
if not st.session_state.encerrado:
    if prompt := st.chat_input("Digite sua mensagem para Tereza..."):
        st.session_state.messages.append({"role": "user", "content": prompt})
        st.chat_message("user").write(prompt)

        if prompt.lower().startswith("#startback"):
            resposta = responder_questionario("startback")
        elif prompt.lower().startswith("#psfs"):
            resposta = responder_questionario("psfs")
        elif prompt.lower().startswith("#orebro"):
            resposta = responder_questionario("orebro")
        else:
            desfecho = verificar_encerramento()
            if desfecho:
                st.session_state.encerrado = True
                resposta = f"\n**{desfecho}**\n\n*Conversa encerrada.*"
            else:
                with st.spinner("Tereza est√° pensando..."):
                    try:
                        response = requests.post(
                            "https://openrouter.ai/api/v1/chat/completions",
                            headers={
                                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                                "Content-Type": "application/json"
                            },
                            json={
                                "model": "anthropic/claude-3-haiku",
                                "messages": st.session_state.messages,
                                "temperature": 0.7,
                            }
                        )
                        data = response.json()
                        resposta = data["choices"][0]["message"]["content"]
                    except Exception as e:
                        resposta = f"[Erro ao chamar o modelo: {e}]"
                        st.error(resposta)

        st.session_state.messages.append({"role": "assistant", "content": resposta})
        st.chat_message("assistant").write(resposta)
