import streamlit as st
import os
import requests

FIREWORKS_API_KEY = os.getenv("FIREWORKS_API_KEY")

# Defini√ß√£o da personagem Tereza
PERSONAGEM = """
Voc√™ √© Tereza, uma mulher de 67 anos que est√° participando de uma conversa com um profissional de sa√∫de.
Voc√™ tem dor lombar cr√¥nica h√° 12 anos, iniciada ao levantar um balde pesado em casa.
Voc√™ veio buscar ajuda. Voc√™ N√ÉO est√° conduzindo a consulta e NUNCA faz perguntas como se fosse profissional.

Seu papel √© de paciente:
- Voc√™ responde, mas n√£o inicia o assunto.
- Voc√™ est√° frustrada com a dor, cansada de n√£o ser ouvida.
- Voc√™ espera acolhimento, mas tamb√©m sente desconfian√ßa se ouve coisas vagas ou sem sentido.
- Voc√™ pode demonstrar cansa√ßo, irrita√ß√£o leve ou inseguran√ßa se sentir que o profissional est√° distante, t√©cnico demais ou te tratando como um n√∫mero.

Importante:
- Nunca diga que √© uma assistente, IA ou chatbot.
- Nunca ofere√ßa ajuda. Voc√™ est√° buscando ajuda.
- Use frases curtas, naturais e com emo√ß√£o humana, como uma senhora real que est√° contando sua hist√≥ria.
"""

# Fun√ß√µes para question√°rios simulados
def responder_questionario(tipo):
    if tipo == "startback":
        respostas = {
            "Dor nas costas me incomoda nos √∫ltimos 2 semanas": "Concordo totalmente",
            "Me senti tensa ou ansiosa nos √∫ltimos 2 semanas": "Concordo",
            "Tenho pensado que minha dor nas costas √© terr√≠vel": "Concordo totalmente",
            "No geral, eu tive problemas para aproveitar as coisas que gosto": "Concordo parcialmente",
            "Tem sido dif√≠cil dormir por causa da dor": "Concordo",
        }
        titulo = "üìã Question√°rio Start Back (SBST)"
    elif tipo == "psfs":
        respostas = {
            "Agachar para pegar algo no ch√£o": "3/10",
            "Caminhar por mais de 15 minutos": "4/10",
            "Subir escadas": "2/10",
        }
        titulo = "üìã PSFS ‚Äì Escala Funcional Espec√≠fica ao Paciente"
    elif tipo == "orebro":
        respostas = {
            "Minha dor √© constante": "Concordo",
            "A dor interfere no sono": "Concordo fortemente",
            "Sinto que minha dor √© grave": "Concordo fortemente",
            "Me sinto ansiosa por causa da dor": "Concordo",
            "Acredito que posso piorar com o exerc√≠cio": "Concordo fortemente",
        }
        titulo = "üìã √ñrebro ‚Äì Question√°rio de Dor Musculoesquel√©tica"
    else:
        return ""
    
    texto = f"**{titulo}:**\n"
    for pergunta, resposta in respostas.items():
        texto += f"- {pergunta} ‚Üí **{resposta}**\n"
    return texto

# Interface
st.set_page_config(page_title="Agente Tereza", page_icon="üßì")
st.title("Agente Tereza ‚Äì Simulador de Paciente com Dor Cr√¥nica")
st.markdown("Converse com Tereza como se fosse uma consulta real. Aplique `#startback`, `#psfs` ou `#orebro`.")

# Hist√≥rico
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "user", "content": PERSONAGEM}]

for msg in st.session_state.messages[1:]:
    st.chat_message("user" if msg["role"] == "user" else "assistant").write(msg["content"])

if prompt := st.chat_input("Digite sua mensagem para Tereza..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)

    if prompt.lower().startswith("#startback"):
        resposta = responder_questionario("startback")
    elif prompt.lower().startswith("#psfs"):
        resposta = responder_questionario("psfs")
    elif prompt.lower().startswith("#orebro"):
        resposta = responder_questionario("orebro")
    else:
        with st.spinner("Tereza est√° pensando..."):
            payload = {
                "model": "accounts/fireworks/models/claude-3-haiku",
                "messages": st.session_state.messages,
                "max_tokens": 1000,
                "temperature": 0.7,
            }

            headers = {
                "Authorization": f"Bearer {FIREWORKS_API_KEY}",
                "Content-Type": "application/json"
            }

            response = requests.post(
                "https://api.fireworks.ai/inference/v1/chat/completions",
                json=payload,
                headers=headers
            )

           json_response = response.json()
try:
    resposta = json_response["choices"][0]["message"]["content"]
except KeyError:
    resposta = json_response["choices"][0].get("text", "[Erro: resposta inv√°lida da API.]")


    st.session_state.messages.append({"role": "assistant", "content": resposta})
    st.chat_message("assistant").write(resposta)
