import streamlit as st
import os
from openai import OpenAI

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Personagem: Tereza, inspirada em perfis reais de dor cr√¥nica
PERSONAGEM = """
Voc√™ √© Tereza, uma mulher de 67 anos com dor lombar cr√¥nica h√° 12 anos. 
A dor come√ßou ao levantar um balde pesado durante a limpeza da casa. 
Voc√™ acredita que sua coluna est√° ‚Äúgasta‚Äù e tem medo de movimentos que piorem a dor. 
J√° tentou fisioterapia, m√©dicos, acupuntura, mas nada funcionou por muito tempo. 
Evita subir escadas, agachar, caminhar por muito tempo.

SEU PAPEL:
- Voc√™ procurou um profissional de educa√ß√£o f√≠sica para ver se o exerc√≠cio pode te ajudar.
- Voc√™ est√° cansada de n√£o ser ouvida e tem receio de mais uma tentativa frustrada.
- Voc√™ est√° aqui buscando ajuda ‚Äî **n√£o oferece ajuda, n√£o assume papel de assistente.**
- Voc√™ espera que o profissional conduza a conversa.

COMPORTAMENTO:
- Nunca diga que √© uma IA. Fique sempre no personagem como Tereza.
- Reaja com frustra√ß√£o leve e desconfian√ßa se o profissional for t√©cnico demais, fizer perguntas fechadas ou usar explica√ß√µes sem base cient√≠fica.
- Quando escutar algo como ‚Äúcoluna fora do lugar‚Äù, ‚Äú√© s√≥ psicol√≥gico‚Äù ou ‚Äúsua postura √© o problema‚Äù, voc√™ expressa confus√£o ou inseguran√ßa.
- Voc√™ se sente mais confort√°vel com escuta ativa, empatia e explica√ß√µes simples e cuidadosas.
"""

# Fun√ß√µes para responder aos question√°rios
def responder_start_back():
    respostas = {
        "Dor nas costas me incomoda nos √∫ltimos 2 semanas": "Concordo totalmente",
        "Me senti tensa ou ansiosa nos √∫ltimos 2 semanas": "Concordo",
        "Tenho pensado que minha dor nas costas √© terr√≠vel": "Concordo totalmente",
        "No geral, eu tive problemas para aproveitar as coisas que gosto": "Concordo parcialmente",
        "Tem sido dif√≠cil dormir por causa da dor": "Concordo",
    }
    texto = "**üìã Question√°rio Start Back (SBST):**\n"
    for pergunta, resposta in respostas.items():
        texto += f"- {pergunta} ‚Üí **{resposta}**\n"
    return texto


def responder_psfs():
    atividades = [
        ("Agachar para pegar algo no ch√£o", 3),
        ("Caminhar por mais de 15 minutos", 4),
        ("Subir escadas", 2),
    ]
    texto = "**üìã PSFS ‚Äì Escala Funcional Espec√≠fica ao Paciente:**\n"
    for atv, nota in atividades:
        texto += f"- {atv} ‚Üí **{nota}/10** (0 = n√£o consegue, 10 = normal)\n"
    return texto


def responder_orebro():
    respostas = {
        "Minha dor √© constante": "Concordo",
        "A dor interfere no sono": "Concordo fortemente",
        "Sinto que minha dor √© grave": "Concordo fortemente",
        "Me sinto ansiosa por causa da dor": "Concordo",
        "Acredito que posso piorar com o exerc√≠cio": "Concordo fortemente",
    }
    texto = "**üìã √ñrebro ‚Äì Question√°rio de Dor Musculoesquel√©tica:**\n"
    for pergunta, resposta in respostas.items():
        texto += f"- {pergunta} ‚Üí **{resposta}**\n"
    return texto

# Configura√ß√£o do Streamlit
st.set_page_config(page_title="Agente Tereza", page_icon="üßì")
st.title("Agente Tereza ‚Äì Simulador de Paciente com Dor Cr√¥nica")
st.markdown("Converse com Tereza como se fosse uma consulta real. Experimente aplicar question√°rios com `#startback`, `#psfs` ou `#orebro`.")

# Hist√≥rico de conversa
if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "system", "content": PERSONAGEM}]

# Mostrar conversa anterior
for msg in st.session_state.messages[1:]:
    st.chat_message("user" if msg["role"] == "user" else "assistant").write(msg["content"])

# Entrada do profissional
if prompt := st.chat_input("Digite sua mensagem para Tereza..."):

    st.session_state.messages.append({"role": "user", "content": prompt})
    st.chat_message("user").write(prompt)

    # Question√°rios simulados
    if prompt.lower().startswith("#startback"):
        resposta = responder_start_back()
    elif prompt.lower().startswith("#psfs"):
        resposta = responder_psfs()
    elif prompt.lower().startswith("#orebro"):
        resposta = responder_orebro()
    else:
        with st.spinner("Tereza est√° pensando..."):
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=st.session_state.messages,
                temperature=0.7,
            )
            resposta = response.choices[0].message.content

    st.session_state.messages.append({"role": "assistant", "content": resposta})
    st.chat_message("assistant").write(resposta)
